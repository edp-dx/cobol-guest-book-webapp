{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Autogenerated documentation for a project serves a primary purpose by providing a reference guide to the system's architecture, functionality, and usage. It facilitates technical assessment and discovery.</p>"},{"location":"discovery/","title":"Technical Discovery","text":""},{"location":"discovery/#whats-the-programming-language-and-its-version-the-project-written-with","title":"What's the programming language and its version the project written with?","text":"<p>The project is written in GnuCOBOL. The specific version of GnuCOBOL is not mentioned in the provided context.</p>"},{"location":"discovery/#whats-the-framework-and-its-version-the-project-written-with","title":"What's the framework and its version the project written with?","text":"<p>The provided context does not specify a software framework or version for the current project. It mentions the use of GnuCOBOL, esqlOC, unixODBC, PostgreSQL, and Apache2 web server for a web application, but these are not software frameworks; they are compilers, libraries, and servers. The version information is also not provided in the context.</p>"},{"location":"discovery/#whats-the-building-tool-and-its-version-the-project-written-with","title":"What's the building tool and its version the project written with?","text":"<p>The build tool used for the project is not explicitly named, but the building of the project is done by running a shell script named \"build_and_deploy.sh\". There is no specific version mentioned for this script.</p>"},{"location":"discovery/#whats-the-deployment-tool-and-its-version-the-project-written-with","title":"What's the deployment tool and its version the project written with?","text":"<p>The deployment process is handled by a custom shell script named <code>build_and_deploy.sh</code> rather than a specific deployment tool with a version number.</p>"},{"location":"discovery/#whats-the-testing-tool-and-its-version-the-project-written-with","title":"What's the testing tool and its version the project written with?","text":"<p>The context provided does not mention a specific testing tool used in the project.</p>"},{"location":"discovery/#if-struts-jsp-jsf-technologies-are-used-in-the-project","title":"If Struts, JSP, JSF technologies are used in the project?","text":"<p>No, the project is a web application written in GnuCOBOL and does not use Struts, JSP, or JSF technologies.</p>"},{"location":"discovery/#what-types-of-ejb-beans-are-used-in-he-project","title":"What types of EJB beans are used in he project?","text":"<p>The provided context does not contain any information regarding the use of Enterprise JavaBeans (EJB) in the project. The project is a COBOL-based web application and does not mention the use of Java or EJBs.</p>"},{"location":"discovery/#whats-the-external-libraries-and-api-are-used-at-the-project","title":"What's the external libraries and API are used at the project?","text":"<p>The provided context does not include specific details about external libraries or APIs being utilized in the project. It only contains information about the GNU General Public License and some general information about the project from the README.md file.</p>"},{"location":"discovery/#check-if-there-is-existing-cicd-pipelines-in-the-project","title":"Check if there is existing CI/CD pipelines in the project?","text":"<p>No, there is no indication of an existing CI/CD pipeline in the provided project files.</p>"},{"location":"discovery/#whats-the-technology-of-cicd-pipeline-and-its-version","title":"What's the technology of CI/CD pipeline and its version?","text":"<p>The provided context does not contain information about the specific technology used for CI/CD pipelines or the current version of that technology.</p>"},{"location":"discovery/#check-if-there-is-any-quality-gates-in-the-existing-cicd-pipeline","title":"Check if there is any quality gates in the existing CI/CD pipeline?","text":"<p>The provided context does not include any information about a Continuous Integration/Continuous Deployment (CI/CD) pipeline or any quality gates implemented within such a pipeline.</p>"},{"location":"discovery/#analyze-cicd-pipelines-for-url-names-namespace-terms-for-the-next-injections-dev-prod-uat-test-and-use-that-information-to-guess-the-number-of-deployment-environments-and-their-names","title":"Analyze CI/CD pipelines for URL, names, namespace terms for the next injections: 'dev', 'prod', 'uat', 'test' and use that information to guess the number of deployment environments and their names","text":"<p>The provided context does not contain information on CI/CD pipelines or deployment environments such as 'dev', 'prod', 'uat', or 'test'. Therefore, I cannot identify the number of deployment environments or their names based on the given files.</p>"},{"location":"discovery/#check-if-custom-libraries-are-used-for-secrets-encryption-list-secrets-encryption-libraries-if-any","title":"Check if custom libraries are used for secrets encryption. List secrets encryption libraries if any","text":"<p>The provided context does not mention the use of any custom libraries for secrets encryption.</p>"},{"location":"discovery/#check-if-passwords-are-hard-coded-in-code","title":"Check if passwords are hard-coded in code","text":"<p>No, the provided code does not contain any hard-coded passwords.</p>"},{"location":"discovery/#check-is-ssl-connection-used-between-this-app-and-a-db","title":"Check is SSL connection used between this app and a DB","text":"<p>The provided context does not mention the use of SSL for the database connection. The database connection strings in the COBOL source code do not include SSL parameters.</p>"},{"location":"discovery/#check-if-api-requires-secure-connection-https-ssl-if-any","title":"Check if API requires secure connection (https, ssl ) if any","text":"<p>The provided context does not contain any information about the requirement of a secure connection such as HTTPS or SSL for the API.</p>"},{"location":"discovery/#check-if-there-are-unit-tests-exists-and-if-it-is-so-print-the-technologies-list","title":"Check if there are unit tests exists and if it is so, print the technologies list","text":"<p>There is no indication in the provided context that unit tests exist or information about testing technologies used in the project.</p>"},{"location":"discovery/#check-if-there-are-integration-tests-that-uses-real-database","title":"Check if there are integration tests that uses real database","text":"<p>There are no integration tests utilizing a real database present in the provided context.</p>"},{"location":"discovery/#check-if-there-are-user-friendly-api-description","title":"Check if there are user friendly API description","text":"<p>I am able to answer only context-related questions.</p>"},{"location":"discovery/#check-if-there-are-hardcoded-ip-addresses","title":"Check if there are hardcoded IP addresses","text":"<p>There are no hardcoded IP addresses present in the provided context.</p>"},{"location":"integration-tests/overview/","title":"Integration Tests","text":"<p>The integration tests featured on this page have been specifically generated for your application, meticulously tailored to validate the seamless integration of its various components and modules. Here, you'll find a curated collection of tests designed to assess the interoperability of your software stack, ensuring reliability and cohesion across the system.</p> <p>Explore integration tests of your application.</p>"},{"location":"integration-tests/overview/#running-tests","title":"Running Tests","text":"<p>To run all tests in this project, you'll first need to install the necessary dependencies:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>Once the dependencies are installed, you can run the tests with the following command:</p> <pre><code>pytest\n</code></pre> <p>This command will automatically discover and run all test files in the current directory and its subdirectories.</p> <p>The <code>pytest.ini</code> file in the project root directory contains configuration for pytest, including settings for the ReportPortal integration. Make sure to fill in the <code>rp_api_key</code> field with your ReportPortal API key.</p>"},{"location":"openapi/overview/","title":"OpenAPI","text":"<p>Here, you'll discover a collection of OpenAPI specifications generated by our Gen-AI pipelines, which intelligently analyze your codebase to uncover relevant specs. These meticulously crafted specifications are tailored to optimize API development, ensuring compatibility and consistency across your projects. Explore this resource to streamline your API documentation and accelerate your development workflow with precision-generated specs.</p>"},{"location":"openapi/overview/#guestbook","title":"guestbook","text":""},{"location":"sources/build_and_deploy.sh/","title":"build_and_deploy.sh","text":""},{"location":"sources/build_and_deploy.sh/#overview","title":"Overview","text":"<p>The <code>build_and_deploy.sh</code> script is a Bash shell script designed to automate the process of building and deploying a guest book application written in COBOL. The script handles precompiling COBOL source files with embedded SQL (esqlOC), compiling them into executables, and then optionally deploying these executables to the appropriate directories on a web server. This script is likely part of a larger project where COBOL is used to generate Common Gateway Interface (CGI) executables for web applications.</p>"},{"location":"sources/build_and_deploy.sh/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"sources/build_and_deploy.sh/#prerequisites","title":"Prerequisites","text":"<ul> <li>Unix-like operating system with a Bash shell.</li> <li>GNU COBOL compiler (<code>cobc</code>) installed.</li> <li>ESQL precompiler (<code>esqlOC</code>) installed.</li> <li>Dependencies for <code>esqlOC</code>, such as the <code>unixodbc</code> package and PostgreSQL ODBC library.</li> <li>Sudo or root access to copy files to <code>/var/www/html</code> and <code>/usr/lib/cgi-bin</code> directories.</li> <li>The source files <code>view-guest-book.cbl</code> and <code>sign-guest-book.cbl</code>, along with any other required COBOL source files, must be present in the same directory as the script.</li> </ul>"},{"location":"sources/build_and_deploy.sh/#usage","title":"Usage","text":"<p>To use the <code>build_and_deploy.sh</code> script:</p> <ol> <li>Ensure all prerequisites are met and the script has execute permissions:    <pre><code>chmod +x build_and_deploy.sh\n</code></pre></li> <li>Run the script from the command line:    <pre><code>./build_and_deploy.sh\n</code></pre></li> <li>The script will precompile, compile, and optionally deploy the guest book application.</li> </ol>"},{"location":"sources/build_and_deploy.sh/#methods","title":"Methods","text":"<p>The script doesn't define functions (or \"methods\") in the traditional sense, as it's a linear script without reusable components. However, it performs the following steps:</p> <ul> <li>Precompiles COBOL source files with embedded SQL using <code>esqlOC</code>.</li> <li>Compiles the precompiled COBOL files into CGI executables using <code>cobc</code>.</li> <li>Copies the CGI executables and HTML files to the web server directories if deployment is enabled.</li> </ul>"},{"location":"sources/build_and_deploy.sh/#useful-details","title":"Useful details","text":"<ul> <li>The <code>DEPLOY_CODE</code> variable controls whether the deployment step is performed. Setting it to <code>true</code> enables the deployment, and any other value skips the deployment process.</li> <li>The <code>HTML_DEST_DIR</code> and <code>CGI_BIN_DEST_DIR</code> variables define the destination directories for the HTML and CGI files on the web server.</li> <li>The script creates a <code>generated_sources</code> directory to store precompiled source files and a <code>bin</code> directory for the compiled executables.</li> <li>It uses verbose output for several commands (<code>-v</code> flag) to provide detailed information during the build process.</li> <li>The build date is captured and displayed, which can be useful for logging or debugging purposes.</li> </ul> <p>Here is an example of the deployment output when <code>DEPLOY_CODE</code> is set to <code>true</code>:</p> <pre><code>*****************************************************************\n*                                                               *\n* Deploying to local web server directories                     *\n*                                                               *\n*****************************************************************\n'/path/to/bin/view-guest-book.cgi' -&gt; '/usr/lib/cgi-bin/view-guest-book.cgi'\n'/path/to/bin/sign-guest-book.cgi' -&gt; '/usr/lib/cgi-bin/sign-guest-book.cgi'\n'/path/to/html/index.html' -&gt; '/var/www/html/index.html'\n</code></pre> <p>This output shows that the CGI executables and HTML files are successfully copied to their respective destination directories on the web server.</p>"},{"location":"sources/sign-guest-book.cbl/","title":"sign-guest-book.cbl","text":""},{"location":"sources/sign-guest-book.cbl/#overview","title":"Overview","text":"<p>The <code>sign-guest-book.cbl</code> file is a COBOL program designed to process form submissions from an HTML guest book page. The primary functionality of this program is to receive a POST request from a web form, validate the input, and insert the guest book entry into a database if the validation passes. The program includes a simple bot-deterrent mechanism by checking the answer to a math question and ensures that the comment field is populated before proceeding with the database insertion. The program also returns an HTML response indicating the status of the guest book signing and provides links for the user to sign the guest book again or view its contents.</p>"},{"location":"sources/sign-guest-book.cbl/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"sources/sign-guest-book.cbl/#prerequisites","title":"Prerequisites","text":"<ul> <li>A COBOL runtime environment capable of executing the program.</li> <li>Database connectivity libraries for COBOL to interact with a PostgreSQL database.</li> <li>An HTTP server configured to execute COBOL CGI programs.</li> <li>A configured PostgreSQL database with the appropriate <code>GUEST_ENTRY</code> table structure.</li> </ul>"},{"location":"sources/sign-guest-book.cbl/#usage","title":"Usage","text":"<p>The program is designed to be run as a CGI script on a web server. When a web form from a guest book page submits a POST request to the server, this script is executed. The server must be configured to handle CGI scripts written in COBOL, and the script must have the appropriate permissions to execute.</p>"},{"location":"sources/sign-guest-book.cbl/#methods","title":"Methods","text":"<p>The main procedures within the <code>sign-guest-book.cbl</code> program are:</p> <ul> <li> <p><code>process-new-entry</code>: Handles the processing of the POST request. It validates the answer to the math question and checks if the comment field is populated. If valid, it proceeds to call <code>insert-into-database</code>.</p> </li> <li> <p><code>insert-into-database</code>: Establishes a connection to the PostgreSQL database using hardcoded connection details (which should be read from a configuration file instead) and inserts a new guest book entry with the provided name, email, and comment.</p> </li> <li> <p><code>sqlstate-check</code>: Checks the SQL state after database operations. It provides error or warning messages based on the SQL return codes and stops the program if a severe error is encountered.</p> </li> </ul>"},{"location":"sources/sign-guest-book.cbl/#useful-details","title":"Useful details","text":"<p>The program uses the <code>TRIM</code> function to check for empty input fields and replaces potentially harmful characters (\"&lt;\", \"&gt;\", \"&amp;\") with spaces to prevent HTML or SQL injection attacks. It also uses <code>html-decode</code> to ensure that text input is correctly formatted for HTML display.</p>"},{"location":"sources/sign-guest-book.cbl/#note-on-security","title":"Note on Security","text":"<p>The program contains hardcoded database connection strings, which is not a security best practice. In a production environment, these should be stored securely and read from a configuration file or environment variable.</p>"},{"location":"sources/sign-guest-book.cbl/#note-on-error-handling","title":"Note on Error Handling","text":"<p>The program performs basic error handling by displaying error messages and stopping execution if a severe database error occurs. This could be further enhanced to handle errors more gracefully in a user-facing application.</p>"},{"location":"sources/sign-guest-book.cbl/#note-on-html-content","title":"Note on HTML Content","text":"<p>The program outputs HTML content directly from COBOL, which is not typical for modern web applications. In a contemporary setting, one would use a template engine or a web framework to separate the presentation and business logic layers.</p>"},{"location":"sources/view-guest-book.cbl/","title":"view-guest-book.cbl","text":""},{"location":"sources/view-guest-book.cbl/#overview","title":"Overview","text":"<p><code>view-guest-book.cbl</code> is a COBOL program designed to display the current contents of a guest book table from a database on a web page. The code is structured to connect to a PostgreSQL database, retrieve guest book entries, and format these entries in HTML to be presented on a webpage. It is likely part of a larger web application project that allows users to sign and view a digital guest book.</p>"},{"location":"sources/view-guest-book.cbl/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"sources/view-guest-book.cbl/#prerequisites","title":"Prerequisites","text":"<ul> <li>A COBOL runtime environment such as GnuCOBOL.</li> <li>Access to a PostgreSQL database server.</li> <li>The database <code>guestbookdb</code> should exist with the necessary schema.</li> <li>The <code>esqloc</code> precompiler for SQL statements in COBOL.</li> <li>Proper database connection credentials (replaced in the <code>BUFFER</code> string within the code).</li> </ul>"},{"location":"sources/view-guest-book.cbl/#usage","title":"Usage","text":"<p>To utilize this program in a project, compile it using a COBOL compiler that supports embedded SQL, such as GnuCOBOL. Before running the program, ensure that the database connection string in the <code>BUFFER</code> variable is properly configured with the correct server address, port, database name, user ID, and password.</p> <p>Once the program is compiled and the environment is set up, it can be executed. The program will output HTML content that can be integrated into a web server's response to display the guest book entries.</p>"},{"location":"sources/view-guest-book.cbl/#methods","title":"Methods","text":"<ul> <li><code>sqlstate-check</code>: A section of the program that checks the SQL state after each SQL operation. It displays error or warning messages based on the SQL state and SQL code returned from the database operations.</li> </ul>"},{"location":"sources/view-guest-book.cbl/#useful-details","title":"Useful details","text":"<ul> <li>SQL operations are performed using embedded SQL within the COBOL code. The <code>EXEC SQL</code> statements are used to declare variables, connect to the database, and perform queries.</li> <li>HTML output is generated using <code>DISPLAY</code> statements to construct the structure of a webpage. This includes setting the MIME type as <code>text/html</code>, writing the HTML doctype, head, and body elements, and formatting the guest book entries in an HTML table.</li> <li>The database connection information is hardcoded in the program. This should ideally be read from a configuration file or environment variables to avoid security risks and improve flexibility.</li> <li>The program contains a <code>TODO</code> comment indicating that the database connection string should not be hardcoded, and this aspect of the program should be improved.</li> <li>A cursor named <code>CUR_ALL</code> is declared for iterating through the guest book entries in the database.</li> <li>The program displays a link to the COBOL source code on GitHub, suggesting that the project is open source.</li> </ul>"},{"location":"sources/web-helpers.cbl/","title":"web-helpers.cbl","text":""},{"location":"sources/web-helpers.cbl/#overview","title":"Overview","text":"<p>The <code>web-helpers.cbl</code> file provides utility functions for handling web-related string data in COBOL programs. It contains two primary functions: <code>get-param-value</code> and <code>html-decode</code>. The <code>get-param-value</code> function is designed to parse key-value pairs from a URL query string or POST data and return the value associated with a specified key. The <code>html-decode</code> function converts HTML-encoded strings back into their original characters, replacing encoded entities with their respective symbol. Both functions help facilitate the processing of web data within COBOL applications, which might be part of a larger system that interacts with web services or handles web form submissions.</p>"},{"location":"sources/web-helpers.cbl/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"sources/web-helpers.cbl/#prerequisites","title":"Prerequisites","text":"<ul> <li>A COBOL compiler that supports the features used in the code (e.g., inline <code>PERFORM</code> and <code>FUNCTION</code> statements).</li> <li>The code may have dependencies on a build and deployment script (referenced as <code>./build_and_deploy.sh</code>), which suggests the need for a server or environment where the COBOL code can be executed and potentially integrated into web services.</li> </ul>"},{"location":"sources/web-helpers.cbl/#usage","title":"Usage","text":"<p>To utilize the functions in a COBOL program, the programmer must copy the functions into their project or include this file in their project's build process. Once included, the functions can be invoked with the required parameters to perform their respective tasks.</p>"},{"location":"sources/web-helpers.cbl/#example-usage-of-get-param-value","title":"Example Usage of <code>get-param-value</code>","text":"<pre><code>   move \"param1=value1 param2=value2\" to ws-query-string\n   move \"param1\" to ws-search-key\n   call \"get-param-value\" using ws-query-string ws-search-key returning ws-found-value\n</code></pre>"},{"location":"sources/web-helpers.cbl/#example-usage-of-html-decode","title":"Example Usage of <code>html-decode</code>","text":"<pre><code>   move \"Hello%2C+World%21\" to ws-html-encoded-string\n   call \"html-decode\" using ws-html-encoded-string returning ws-html-decoded-string\n</code></pre>"},{"location":"sources/web-helpers.cbl/#methods","title":"Methods","text":""},{"location":"sources/web-helpers.cbl/#get-param-value","title":"<code>get-param-value</code>","text":"<p>This function parses a string containing key-value pairs and returns the value associated with a given key. If the key is not found, it returns a space.</p> <p>Parameters: - <code>l-raw-map-string</code>: The input string containing key-value pairs. - <code>l-param-search-key</code>: The key for which the value is to be searched. - <code>l-found-value</code>: The value returned by the function, if the key is found.</p>"},{"location":"sources/web-helpers.cbl/#html-decode","title":"<code>html-decode</code>","text":"<p>This function replaces HTML-encoded character sequences in a string with their respective symbols. It has limited support for character conversions and explicitly disallows certain characters, such as <code>&lt;</code> and <code>&gt;</code>.</p> <p>Parameters: - <code>l-html-encoded-string</code>: The HTML-encoded input string. - <code>l-html-decoded-string</code>: The decoded string returned by the function.</p>"},{"location":"sources/web-helpers.cbl/#useful-details","title":"Useful details","text":"<ul> <li>The <code>get-param-value</code> function uses a space to separate key-value pairs and an equals sign <code>=</code> to separate keys from values.</li> <li>The <code>html-decode</code> function currently has a limited set of supported characters. It is noted in the code that the conversion of <code>&lt;</code> and <code>&gt;</code> characters to a space is intentional to disallow these characters.</li> <li>Both functions use local storage and working storage sections to define necessary variables and constants.</li> <li>The maximum number of keys supported by <code>get-param-value</code> is defined by <code>ws-max-keys</code>. The maximum string length supported by <code>html-decode</code> is defined by <code>ws-max-string-length</code>.</li> <li>It is important to note the last modification dates for the functions, which are 2021-03-25 for <code>get-param-value</code> and 2021-03-24 for <code>html-decode</code>, indicating that the code may need reviewing for updates or additional functionality.</li> </ul>"},{"location":"sources/db_scripts/create_database.sql/","title":"create_database.sql","text":""},{"location":"sources/db_scripts/create_database.sql/#overview","title":"Overview","text":"<p>The <code>create_database.sql</code> file is a SQL script designed for setting up a database structure for a guestbook application. Its primary purpose is to create a new database called <code>guestbookdb</code> and define the schema for a table named <code>guest_entry</code>. This table is intended to store entries made by guests, including their names, email addresses, and comments, along with a timestamp for when the entry was created. The script is used at the beginning of the project to set up the initial database structure and can be reused whenever there is a need to reset the database to its original state.</p>"},{"location":"sources/db_scripts/create_database.sql/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"sources/db_scripts/create_database.sql/#prerequisites","title":"Prerequisites","text":"<p>Before running this SQL script, the following prerequisites must be met: - Have a PostgreSQL server installed and running. - Have a user account with sufficient privileges to create databases and tables. - Have a PostgreSQL client tool or command-line utility (e.g., <code>psql</code>) to execute the SQL script.</p>"},{"location":"sources/db_scripts/create_database.sql/#usage","title":"Usage","text":"<p>To use this script, follow these steps: 1. Open your PostgreSQL client tool or command-line utility. 2. Connect to your PostgreSQL server using the appropriate credentials. 3. Execute the SQL script either by copying and pasting the commands into the client or by running the script file directly if your client supports this operation.</p> <p>Here's an example of how you might run the script using the <code>psql</code> command-line utility: <pre><code>psql -h hostname -U username -f create_database.sql\n</code></pre> Replace <code>hostname</code> with the address of your PostgreSQL server and <code>username</code> with the username of your PostgreSQL account.</p>"},{"location":"sources/db_scripts/create_database.sql/#methods","title":"Methods","text":"<p>This SQL script does not contain methods in the traditional programming sense but consists of SQL statements which perform the following actions: - CREATE DATABASE: Creates a new database named <code>guestbookdb</code>. - \\c guestbookdb: Connects to the <code>guestbookdb</code> database. - DROP TABLE IF EXISTS: Removes the <code>guest_entry</code> table if it already exists. - CREATE TABLE: Creates a new <code>guest_entry</code> table with the following columns:   - <code>id</code>: An auto-incrementing integer that serves as the primary key.   - <code>guest_name</code>: A variable character string to store the guest's name.   - <code>guest_email</code>: A variable character string to store the guest's email address, which can be null.   - <code>guest_comment</code>: A variable character string to store the guest's comment.   - <code>create_dt</code>: A timestamp with a default value of the current date and time when the entry is created.</p>"},{"location":"sources/db_scripts/create_database.sql/#useful-details","title":"Useful details","text":"<p>This script is typically executed only once at the start of the project to initialize the database, or it can be used to reset the database during development. It is important to note that running this script will result in the loss of any existing data in the <code>guest_entry</code> table due to the <code>DROP TABLE IF EXISTS</code> statement. Therefore, it should be used with caution in a production environment or any situation where data preservation is necessary.</p>"},{"location":"sources/html/sign-guest-book.html/","title":"sign-guest-book.html","text":""},{"location":"sources/html/sign-guest-book.html/#overview","title":"Overview","text":"<p>The <code>sign-guest-book.html</code> file is an HTML document that is part of a web application written to demonstrate GnuCOBOL's capabilities in handling CGI scripts. This particular file provides the interface for users to sign a virtual guest book. It includes a form that collects the user's name, email address, and comment. The form also contains a simple math captcha to prevent automated spam. Upon submission, the form data is sent to a server-side CGI script (<code>sign-guest-book.cgi</code>) for processing.</p> <p>This webpage is likely part of a larger project that showcases how COBOL can be integrated with modern web technologies to create dynamic web applications. It serves as a front-end component allowing users to interact with the back-end COBOL application.</p>"},{"location":"sources/html/sign-guest-book.html/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"sources/html/sign-guest-book.html/#prerequisites","title":"Prerequisites","text":"<ul> <li>A web server capable of serving HTML files.</li> <li>A CGI-capable server configured to handle <code>.cgi</code> scripts, specifically <code>sign-guest-book.cgi</code>.</li> <li>A GnuCOBOL environment set up on the server to run the COBOL scripts.</li> </ul>"},{"location":"sources/html/sign-guest-book.html/#usage","title":"Usage","text":"<p>To use <code>sign-guest-book.html</code> within a web application, follow these steps: 1. Place the <code>sign-guest-book.html</code> file in the appropriate directory on your web server. 2. Ensure that the <code>sign-guest-book.cgi</code> script is correctly installed and configured to handle form submissions on the server. 3. Access the <code>sign-guest-book.html</code> page through a web browser by navigating to the corresponding URL where the file is hosted. 4. The user can then fill out the form fields and submit the form to sign the guest book.</p> <p>An example URL to access the page could be: <pre><code>http://www.example.com/sign-guest-book.html\n</code></pre></p>"},{"location":"sources/html/sign-guest-book.html/#methods","title":"Methods","text":"<p>There are no JavaScript methods or functions within this HTML file, as it is purely a static form document.</p>"},{"location":"sources/html/sign-guest-book.html/#useful-details","title":"Useful details","text":"<ul> <li>The HTML form uses a <code>post</code> method to send data to the server, which is a standard practice for form submissions that result in a change on the server (such as adding a new entry to a guest book).</li> <li>The action attribute of the form element indicates the URL of the CGI script that will process the form submission. The server must be configured to execute this script upon request.</li> <li>The math captcha (\"What is five times four?\") is a simple mechanism intended to differentiate human users from bots. The server-side script would typically validate the answer before accepting the form submission.</li> <li>Styling is minimal and defined within the file itself. For a production application, it would be better to move styling to a separate CSS file.</li> <li>The link to the COBOL source code suggests that the application is open source and the back-end code is available on GitHub for review or contribution.</li> </ul> <p>Remember to replace the server URLs and paths with the appropriate ones for your specific deployment.</p>"},{"location":"test-cases/overview/","title":"Gherkin","text":"<p>This curated list showcases Gherkin features generated by our GEN-AI pipeline, leveraging advanced LLM to discover scripts based on your code. These features are tailored to optimize test automation, enhancing efficiency and effectiveness in your software testing endeavors. Explore this resource to streamline your testing processes and elevate your development workflow with precision-generated scripts.</p>"},{"location":"test-cases/overview/#signguestbookfeature","title":"SignGuestbook.feature","text":"<pre><code>Feature: Sign the Guest Book\n\n  Background:\n    Given the COBOL Guest Book Webapp is running\n\n  Scenario: Successfully sign the guest book\n    Given I have the following signer details\n      | name    | John Doe       |\n      | message | Great service! |\n    When I submit a request to sign the guest book\n    Then the response should indicate the signing was successful\n    And the response should contain \"Thank you, John Doe, for your message!\"\n\n  Scenario: Attempt to sign with missing name\n    Given I have the following signer details\n      | message | Missing name! |\n    When I submit a request to sign the guest book\n    Then the response should indicate a failure due to missing name\n    And the response status code should be 400\n\n  Scenario: Attempt to sign with missing message\n    Given I have the following signer details\n      | name | Jane Doe |\n    When I submit a request to sign the guest book\n    Then the response should indicate a failure due to missing message\n    And the response status code should be 400\n</code></pre>"},{"location":"test-cases/overview/#viewguestbookfeature","title":"ViewGuestbook.feature","text":"<pre><code>Feature: View the Guest Book\n\n  Background:\n    Given the COBOL Guest Book Webapp is running\n\n  Scenario: View all guest book entries\n    When I submit a request to view the guest book\n    Then the response should be successful\n    And the response should contain a list of all guest book entries\n\n  Scenario: View guest book when it's empty\n    Given the guest book currently has no entries\n    When I submit a request to view the guest book\n    Then the response should be successful\n    And the response should indicate the guest book is empty\n</code></pre>"}]}